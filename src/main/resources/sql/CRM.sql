drop table BILL;
drop table INVOICE;
drop table CONTRACT;
drop table ENTITY;
drop table USER_EVENT;
drop table CONTACT;
drop table EVENT_TYPE;
drop table TOTAL_INVOICE;
drop table CLIENT;
drop table CONTRACT_CONTACTS;
drop table template;
drop table client_group;
drop table file;
drop table client_has_group;
drop table CLIENT_TODO;
drop table CRM_SETTINGS;
drop table payment;

delete from users;

#Клиент. Все эти данные выгружаются из 1С (кроме TYPE) и потом не редактируются
CREATE TABLE CLIENT (
	ID VARCHAR(30) NOT NULL PRIMARY KEY,
	
	SHORT_NAME VARCHAR(50) NOT NULL,
	FULL_NAME VARCHAR(250) NOT NULL,

	TYPE VARCHAR(1) NOT NULL,  #I - физлицо, P - юр лицо

  OPERATOR VARCHAR(50) NULL,

	INN VARCHAR(20) NOT NULL,
	OKPO VARCHAR(20),
	PERSONAL_ACCOUNT VARCHAR(20), #лицевой счет

	EMAIL VARCHAR(100),

	DISABLED TINYINT(1),

	REGISTRATION_ADDRESS VARCHAR(1000),
	MOBILE_NUMBER VARCHAR(11),
	ALL_IDS LONGTEXT
) engine = InnoDb;

create table TOTAL_INVOICE (
  ID BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CLIENT_ID VARCHAR(30) NOT NULL,
  INVOICE DECIMAL(12,2)  #общая задолженность, будет обновляться каждый день
);

create table payment (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,

	CONTRACT_ID VARCHAR(17) NOT NULL,
	SUM DECIMAL(12,2)  #оплата
);

#Контактные данные. Это они сами будут все заполнять и заводить
CREATE TABLE CONTACT (
	ID BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
	ORDER_CONTACT BIGINT NOT NULL,
	CLIENT_ID VARCHAR(30) NOT NULL,
	FIRST_NAME VARCHAR(50),
	LAST_NAME VARCHAR(50),
	MIDDLE_NAME VARCHAR(50),

	MOBILE_NUMBER_2 VARCHAR(11),
	MOBILE_NUMBER_3 VARCHAR(11),
	
	HOME_ADDRESS VARCHAR(1000),
	POST_ADDRESS VARCHAR(1000),
	BIRTH_DATE DATE,
	SEX VARCHAR(1),

    MASTER TINYINT(1),
	
	CHANGER_USERNAME VARCHAR(50) NOT NULL,
	START_DATE TIMESTAMP,
	END_DATE TIMESTAMP,
	
	COMMENT VARCHAR(2000) #каменты по контактным лицам

) engine = InnoDb;

#Договор (все из 1с)
CREATE TABLE CONTRACT (
	ID VARCHAR(17) NOT NULL PRIMARY KEY,
	
	CLIENT_ID VARCHAR(30) NOT NULL,
	ENTITY_ID BIGINT NOT NULL,

	TOTAL_INVOICE DECIMAL(12,2),  #задолженность

	CONTRACT_NUMBER VARCHAR(50) NOT NULL,

	CONTRACT_START_DATE DATE NOT NULL,
	CONTRACT_END_DATE DATE
) engine = InnoDb;

#Какие контакты доступны для определенного договора
CREATE TABLE CONTRACT_CONTACTS (
	ID BIGINT UNSIGNED NOT NULL PRIMARY KEY,
	
	CONTRACT_ID VARCHAR(17) NOT NULL,
	CONTACT_ID BIGINT NOT NULL,
		
	UNIQUE (CONTRACT_ID, CONTACT_ID)
) engine = InnoDb;

#счет 
#Будет обновляться каждый день по расписанию. Все поля вычисляемые
CREATE TABLE INVOICE (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	
	CONTRACT_ID VARCHAR(17) NOT NULL,
	NUMBER VARCHAR(20) NOT NULL,

	INVOICE_DATE DATE NOT NULL,  #текущая дата вычисления
	PERIOD LONGTEXT,  #текущая дата вычисления
	DESCRIPTION LONGTEXT,  #текущая дата вычисления
	DEBT DECIMAL(12,2)  #задолженность
) engine = InnoDb;

#операции по счету
# Им нужно знать только те операции, которые не проплачены или проплачены не до конца, по этому можно хранить только их, хотя можно и все подряд
CREATE TABLE BILL (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	
	INVOICE_ID BIGINT NOT NULL,
	PRICE DECIMAL(12,2), #выставленный счет
	BILL_DATE DATE, #дата выставленного счета
	DEBT DECIMAL(12,2), #сколько заплатили
	DESCRIPTION VARCHAR(2000)
	
) engine = InnoDb;

#лог событий
CREATE TABLE USER_EVENT (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	
	USER_NAME VARCHAR(50) NOT NULL,
	CLIENT_ID VARCHAR(30),
	CONTACT_ID BIGINT,
	EVENT_TYPE_CODE VARCHAR(20), #если NULL - кастомное событие, смотрим в DESCRIPTION,
	DESCRIPTION VARCHAR(2000), #если EVENT_TYPE_CODE != null, можно использовать просто как поле с комментарием к событию
	EVENT_DATE TIMESTAMP

) engine = InnoDb;

CREATE TABLE EVENT_TYPE (
	CODE VARCHAR(20) NOT NULL PRIMARY KEY,
	
	NAME VARCHAR(2000)
) engine = InnoDb;

#компании, с которыми клиенты заключают договора
CREATE TABLE ENTITY (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,

	NAME VARCHAR(250),
	SHORT_NAME VARCHAR(250)
) engine = InnoDb;

CREATE TABLE FILE (
  ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  CLIENT_ID VARCHAR(30) NOT NULL,
  NAME VARCHAR(500) NOT NULL
) engine = InnoDb;


CREATE TABLE template (
  id BIGINT NOT NULL AUTO_INCREMENT,
  SUBJECT VARCHAR(100) NOT NULL ,
  name VARCHAR(255) NULL,
  type VARCHAR(45) NULL,
  template LONGTEXT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX id_UNIQUE (id ASC));


CREATE TABLE `CLIENT_GROUP` (
  `GROUP_CODE` VARCHAR(45) NOT NULL PRIMARY KEY,
  `DESCRIPTION` VARCHAR(250) NOT NULL
);

CREATE TABLE `CLIENT_HAS_GROUP` (
  `CLIENT_ID` VARCHAR(30) NOT NULL,
  `GROUP_CODE` VARCHAR(45) NOT NULL);

CREATE TABLE CLIENT_TODO (
  ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,

  START_DATE TIMESTAMP NOT NULL,
  END_DATE TIMESTAMP,

  TITLE VARCHAR(150) NOT NULL,
  DESCRIPTION VARCHAR(500),

  CLIENT_ID VARCHAR(30) NOT NULL,

  CREATED_BY VARCHAR(50) NOT NULL,
  FINISHED_BY VARCHAR(50),

  CREATED TIMESTAMP NOT NULL ,
  FINISHED TIMESTAMP,

  ALL_DAY BIT NULL,

  UNIQUE INDEX id_UNIQUE (ID ASC));

#операции по счету
# Им нужно знать только те операции, которые не проплачены или проплачены не до конца, по этому можно хранить только их, хотя можно и все подряд
CREATE TABLE INTEGRATION_AUDIT (
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,

	`TYPE` VARCHAR(30) NOT NULL,
	`USER_NAME` VARCHAR(50) NOT NULL,
	`CREATED` DATETIME NOT NULL,
	`COMPLETED` DATETIME,
	`ERROR_ENDED` DATETIME,
	`VERSION` DATETIME NOT NULL ,
	`LOG` LONGTEXT

) engine = InnoDb;

create table CRM_SETTINGS (
	SETTING_CODE VARCHAR(10) NOT NULL PRIMARY KEY,
	SETTING_NAME VARCHAR(100) NOT NULL,
	SETTING_VALUE VARCHAR(200) NOT NULL
) engine = InnoDb;;

ALTER TABLE GUARD.CONTACT MODIFY COLUMN END_DATE timestamp NULL;
ALTER TABLE GUARD.CLIENT_TODO MODIFY COLUMN START_DATE timestamp NULL;
ALTER TABLE GUARD.CLIENT_TODO MODIFY COLUMN END_DATE timestamp NULL;
ALTER TABLE GUARD.CLIENT_TODO MODIFY COLUMN CREATED timestamp NULL;
ALTER TABLE GUARD.CLIENT_TODO MODIFY COLUMN FINISHED timestamp NULL;

